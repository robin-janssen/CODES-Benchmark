name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10']

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to support dependency checks
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Poetry Plugin for Export
        run: |
          poetry self add poetry-plugin-export

      - name: Install project with dev dependencies
        run: |
          poetry install --with dev

      - name: Check for dependency changes
        run: |
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            if git diff --name-only HEAD~1 | grep -qE 'pyproject.toml|poetry.lock'; then
              echo "dependencies-changed=true" >> $GITHUB_ENV
            else
              echo "dependencies-changed=false" >> $GITHUB_ENV
            fi
          else
            echo "HEAD~1 is not available, assuming no dependency changes."
            echo "dependencies-changed=false" >> $GITHUB_ENV
          fi

      - name: Generate requirements.txt
        if: env.dependencies-changed == 'true'
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Commit and push updated requirements.txt
        if: env.dependencies-changed == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add requirements.txt
          git commit -m "Update requirements.txt [skip ci]"
          git push

      - name: Run Black (auto-reformat)
        run: |
          poetry run black .

      - name: Run isort (auto-reformat)
        run: |
          poetry run isort .

      - name: Run pytest and generate coverage report
        run: |
          poetry run pytest --cov-report=term-missing:skip-covered --cov=codes test/ --cov-report=xml:coverage.xml

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  
          files: ./coverage.xml  
          fail_ci_if_error: true  

  docs:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10']

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history if necessary

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install project with dev dependencies
        run: |
          poetry install --with dev

      - name: Generate API Documentation with Sphinx
        run: |
          poetry run sphinx-apidoc -o docs/ codes

      - name: Build HTML with Sphinx
        run: |
          poetry run sphinx-build -b html docs/ docs/_build

      - name: Deploy Sphinx API docs to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build
          publish_branch: gh-pages
          user_name: "GitHub Actions"
          user_email: "actions@github.com"
