from typing import Any, Dict

import numpy as np

spy = 365.0 * 24.0 * 3600.0  # Seconds per year


def lotka_volterra(n: np.ndarray) -> np.ndarray:
    """
    Defines the Lotka-Volterra predator-prey model with three predators and three prey.

    Parameters
    ----------
    n : np.ndarray
        Current populations [p1, p2, p3, q1, q2, q3].

    Returns
    -------
    np.ndarray
        Derivatives [dp1/dt, dp2/dt, dp3/dt, dq1/dt, dq2/dt, dq3/dt].
    """
    p1, p2, p3, q1, q2, q3 = n
    derivatives = np.array(
        [
            0.5 * p1 - 0.02 * p1 * q1 - 0.01 * p1 * q2,
            0.6 * p2 - 0.03 * p2 * q1 - 0.015 * p2 * q3,
            0.4 * p3 - 0.01 * p3 * q2 - 0.025 * p3 * q3,
            -0.1 * q1 + 0.005 * p1 * q1 + 0.007 * p2 * q1,
            -0.08 * q2 + 0.006 * p1 * q2 + 0.009 * p3 * q2,
            -0.12 * q3 + 0.008 * p2 * q3 + 0.01 * p3 * q3,
        ]
    )
    return derivatives


def reaction(t: float, n: np.ndarray) -> np.ndarray:
    """
    Defines a chemically motivated reaction system with five species.

    Reactions:
        1. A → B                 (k1)
        2. B + C ↔ D            (k2, k_minus2)
        3. 2D → E               (k3)
        4. E → A + C            (k4)
        5. C → A                (k5)

    Parameters
    ----------
    t : float
        Current time.
    n : np.ndarray
        Current concentrations [A, B, C, D, E].

    Returns
    -------
    np.ndarray
        Derivatives [dA/dt, dB/dt, dC/dt, dD/dt, dE/dt].
    """
    # Unpack concentrations
    s1, s2, s3, s4, s5 = n

    # Define rate constants
    k1 = 0.25  # Rate constant for A → B
    k2 = 0.5  # Forward rate constant for B + C → D
    k_minus2 = 0.25  # Reverse rate constant for D → B + C
    k3 = 0.1  # Rate constant for 2D → E
    k4 = 0.15  # Rate constant for E → A + C
    k5 = 0.05  # Rate constant for C → A

    # Calculate reaction rates
    rate1 = k1 * s1
    rate2_forward = k2 * s2 * s3
    rate2_reverse = k_minus2 * s4
    rate2_net = rate2_forward - rate2_reverse
    rate3 = k3 * s4**2
    rate4 = k4 * s5
    rate5 = k5 * s3

    # Differential equations
    ds1_dt = -rate1 + rate4 + rate5
    ds2_dt = rate1 - rate2_net
    ds3_dt = -rate2_net - rate5 + rate4
    ds4_dt = rate2_net - 2 * rate3
    ds5_dt = rate3 - rate4

    # Return derivatives
    return np.array([ds1_dt, ds2_dt, ds3_dt, ds4_dt, ds5_dt])


def simple_ode(t: float, n: np.ndarray) -> np.ndarray:
    """
    Defines a numerically stable, non-conservative ODE system with interesting but controlled dynamics.

    Parameters
    ----------
    n : np.ndarray
        Current state [s1, s2, s3, s4, s5].

    Returns
    -------
    np.ndarray
        Derivatives [ds1/dt, ds2/dt, ds3/dt, ds4/dt, ds5/dt].
    """
    s1, s2, s3, s4, s5 = n

    # Rate constants
    k1, k2, k3, k4 = 0.7, 0.3, 0.4, 0.2
    k5, k6 = 0.25, 0.15  # Decay terms
    influx = 0.1  # Constant mass influx

    # Interaction terms (simplified)
    rate1 = k1 * s1 * (1 - s1)  # Logistic-like self-regulation
    rate2 = k2 * s2 * s3  # Simple interaction between s2 and s3
    rate3 = k3 * s4 * (1 - 0.1 * s4)  # Mild quadratic feedback for saturation
    rate4 = k4 * s5 * s2  # Interaction between s5 and s2
    rate5 = k3 * s4

    # Loss terms
    decay1 = k5 * s1
    decay2 = k6 * s3

    # System equations (mass is not conserved)
    ds1_dt = influx + rate1 - decay1  # s1 has an external source and self-regulation
    ds2_dt = rate2 - 0.5 * s2  # s2 grows via interaction with s3 and has linear damping
    ds3_dt = -rate2 + rate5 - decay2  # s3 is consumed by s2 but replenished by s4
    ds4_dt = rate3 - 0.1 * s4  # Simple growth and decay for stability
    ds5_dt = rate4 - 0.2 * s5  # Simple linear decay

    return np.array([ds1_dt, ds2_dt, ds3_dt, ds4_dt, ds5_dt])


def coupled_nonlinear_oscillators(t, state):
    """
    Defines a system of 5 coupled nonlinear harmonic oscillators.

    State Variables:
        state = [x1, v1, x2, v2, x3, v3, x4, v4, x5, v5]

    Parameters:
        t : float
            Current time
        state : np.ndarray
            Current state of the system [x1, v1, x2, v2, x3, v3, x4, v4, x5, v5]

    Returns:
        derivatives : list
            Derivatives [dx1/dt, dv1/dt, ..., dx5/dt, dv5/dt]
    """
    # Unpack the state variables
    x1, x2, x3, x4, x5, v1, v2, v3, v4, v5 = state

    # Define parameters
    # Masses
    m1 = m2 = m3 = m4 = m5 = 1.0

    # Linear spring constants
    k1 = 2.0
    k2 = 2.0
    k3 = 2.0
    k4 = 2.0
    k5 = 2.0

    # Nonlinear spring coefficients (cubic terms)
    alpha1 = 0.5
    alpha2 = 0.5
    alpha3 = 0.5
    alpha4 = 0.5
    alpha5 = 0.5

    # Damping coefficients
    c1 = 0.5
    c2 = 0.5
    c3 = 0.5
    c4 = 0.5
    c5 = 0.5

    # Nonlinear coupling coefficients
    beta13 = 0.05
    beta24 = 0.05
    beta35 = 0.05
    beta41 = 0.05
    beta52 = 0.05

    # Compute derivatives
    # Position derivatives are velocities
    dx1_dt = v1
    dx2_dt = v2
    dx3_dt = v3
    dx4_dt = v4
    dx5_dt = v5

    # Velocity derivatives
    dv1_dt = (
        -c1 * v1 - k1 * (x1 - x2) - alpha1 * (x1 - x2) ** 3 + beta13 * (x3 - x1) ** 2
    ) / m1

    dv2_dt = (
        -c2 * v2
        - k2 * (x2 - x1)
        - alpha2 * (x2 - x1) ** 3
        - k3 * (x2 - x3)
        - alpha3 * (x2 - x3) ** 3
        + beta24 * (x4 - x2) ** 2
    ) / m2

    dv3_dt = (
        -c3 * v3
        - k3 * (x3 - x2)
        - alpha3 * (x3 - x2) ** 3
        - k4 * (x3 - x4)
        - alpha4 * (x3 - x4) ** 3
        + beta35 * (x5 - x3) ** 2
    ) / m3

    dv4_dt = (
        -c4 * v4
        - k4 * (x4 - x3)
        - alpha4 * (x4 - x3) ** 3
        - k5 * (x4 - x5)
        - alpha5 * (x4 - x5) ** 3
        + beta41 * (x1 - x4) ** 2
    ) / m4

    dv5_dt = (
        -c5 * v5 - k5 * (x5 - x4) - alpha5 * (x5 - x4) ** 3 + beta52 * (x2 - x5) ** 2
    ) / m5

    return np.array(
        [dx1_dt, dx2_dt, dx3_dt, dx4_dt, dx5_dt, dv1_dt, dv2_dt, dv3_dt, dv4_dt, dv5_dt]
    )


def osu_ode(t: float, y: np.ndarray) -> np.ndarray:
    """
    ODE system for the reduced osu2008 chemical network.
    (Parameters have been hardcoded: tgas = 50, crate = 1e-16.)
    The state vector y contains the log10 abundances for the following species
    (in order):
       ["C", "C+", "CH", "CH+", "CH2", "CH2+", "CH3", "CH3+",
        "CH4", "CH4+", "CH5+", "CO", "CO+", "E", "H", "H+",
        "H2", "H2+", "H2O", "H2O+", "H3+", "H3O+", "HCO+",
        "O", "O+", "O2", "O2+", "OH", "OH+"]
    """
    # Hardcoded parameters
    tgas = 50
    crate = 1e-16
    tgas32 = tgas / 300.0
    invt = 1.0 / tgas

    # Define rate constants k[0] ... k[223]
    k = np.zeros(224)
    k[0] = 4.9500e-17 * tgas32 ** (0.50)
    k[1] = 1.020000e03 * crate
    k[2] = 4.600000e-01 * crate
    k[3] = 2.800000e00 * crate
    k[4] = 7.300000e02 * crate
    k[5] = 5.000000e00 * crate
    k[6] = 3.000000e00 * crate
    k[7] = 1.000000e-01 * crate
    k[8] = 2.200000e-02 * crate
    k[9] = 9.300000e-01 * crate
    k[10] = 7.500000e02 * crate
    k[11] = 1.170000e02 * crate
    k[12] = 5.100000e02 * crate
    k[13] = 5.000000e02 * crate
    k[14] = 9.700000e02 * crate
    k[15] = 5.000000e02 * crate
    k[16] = 5.000000e02 * crate
    k[17] = 2.340000e03 * crate
    k[18] = 1.760000e02 * crate
    k[19] = 2.7000e-09 * tgas32 ** (-0.50)
    k[20] = 4.1000e-10
    k[21] = 7.5000e-10
    k[22] = 2.9000e-09 * tgas32 ** (-0.33)
    k[23] = 4.3400e-10 * tgas32 ** (-0.50)
    k[24] = 8.9000e-10 * tgas32 ** (-0.50)
    k[25] = 1.0000e-09
    k[26] = 7.0000e-10 * np.exp(-2.3200e02 * invt)
    k[27] = 1.4000e-08 * tgas32 ** (-0.50)
    k[28] = 1.2000e-09
    k[29] = 1.6000e-08 * tgas32 ** (-0.50)
    k[30] = 1.1400e-09 * tgas32 ** (-0.50)
    k[31] = 1.1400e-09 * tgas32 ** (-0.50)
    k[32] = 7.3000e-09 * tgas32 ** (-0.50)
    k[33] = 3.4000e-09
    k[34] = 2.3000e-09
    k[35] = 1.5000e-09
    k[36] = 7.0000e-10
    k[37] = 3.5000e-10
    k[38] = 3.5000e-10
    k[39] = 1.6000e-09
    k[40] = 3.0000e-11
    k[41] = 3.6000e-10
    k[42] = 3.6000e-10
    k[43] = 9.7000e-10
    k[44] = 3.2000e-09
    k[45] = 1.1000e-10
    k[46] = 8.9000e-10
    k[47] = 7.5000e-10
    k[48] = 3.5000e-10
    k[49] = 1.2000e-09
    k[50] = 1.0000e-11
    k[51] = 9.7000e-10
    k[52] = 7.5000e-10
    k[53] = 2.9000e-09
    k[54] = 5.8000e-10
    k[55] = 1.1000e-10
    k[56] = 4.0000e-10
    k[57] = 1.4000e-10
    k[58] = 3.2000e-10
    k[59] = 3.2000e-10
    k[60] = 7.5000e-10
    k[61] = 1.2000e-10
    k[62] = 3.1000e-10
    k[63] = 3.1000e-10
    k[64] = 4.3000e-10
    k[65] = 4.3000e-10
    k[66] = 1.7000e-09
    k[67] = 8.8000e-10
    k[68] = 4.5500e-10
    k[69] = 7.9300e-10
    k[70] = 2.4000e-09
    k[71] = 6.4000e-10
    k[72] = 1.5000e-09
    k[73] = 7.1000e-10
    k[74] = 7.1000e-10
    k[75] = 6.0000e-10
    k[76] = 2.2000e-09
    k[77] = 2.1000e-09
    k[78] = 8.0000e-10
    k[79] = 7.6000e-10
    k[80] = 7.6000e-10
    k[81] = 1.0000e-09
    k[82] = 1.0000e-09
    k[83] = 3.9000e-09
    k[84] = 3.4000e-09
    k[85] = 2.3000e-09
    k[86] = 1.4000e-09
    k[87] = 1.1000e-10
    k[88] = 5.2000e-11
    k[89] = 5.2000e-11
    k[90] = 3.1000e-10
    k[91] = 3.1000e-10
    k[92] = 4.3000e-10
    k[93] = 1.2000e-09
    k[94] = 7.1000e-10
    k[95] = 3.5000e-10
    k[96] = 3.5000e-10
    k[97] = 1.0000e-09
    k[98] = 1.1000e-09
    k[99] = 5.9000e-10
    k[100] = 7.0000e-10
    k[101] = 4.8000e-10
    k[102] = 4.8000e-10
    k[103] = 1.5000e-09
    k[104] = 1.3000e-09
    k[105] = 1.4000e-09
    k[106] = 1.9500e-10
    k[107] = 7.5000e-10
    k[108] = 1.2000e-09
    k[109] = 9.1000e-10
    k[110] = 1.1000e-09
    k[111] = 4.0000e-11
    k[112] = 3.4000e-10
    k[113] = 3.4000e-10
    k[114] = 5.0000e-10
    k[115] = 6.1000e-10
    k[116] = 4.3000e-10
    k[117] = 6.9000e-10
    k[118] = 4.7000e-10
    k[119] = 4.7000e-10
    k[120] = 2.1000e-09
    k[121] = 1.3000e-09
    k[122] = 2.0000e-09
    k[123] = 8.0000e-10
    k[124] = 8.5000e-09 * tgas32 ** (-0.50)
    k[125] = 1.6100e-09
    k[126] = 9.5000e-09 * tgas32 ** (-0.50)
    k[127] = 1.4000e-09 * tgas32 ** (-0.50)
    k[128] = 4.5000e-09 * tgas32 ** (-0.50)
    k[129] = 2.1000e-09
    k[130] = 2.4000e-09
    k[131] = 1.1000e-09
    k[132] = 4.5000e-09 * tgas32 ** (-0.50)
    k[133] = 2.3300e-09 * tgas32 ** (-0.50)
    k[134] = 7.1900e-10 * tgas32 ** (-0.50)
    k[135] = 2.1000e-09 * tgas32 ** (-0.50)
    k[136] = 2.0500e-10
    k[137] = 1.0000e-11
    k[138] = 4.8000e-09 * tgas32 ** (-0.50)
    k[139] = 7.7800e-10 * tgas32 ** (-0.50)
    k[140] = 1.0000e-11
    k[141] = 1.0000e-09
    k[142] = 1.4000e-09
    k[143] = 3.5000e-11
    k[144] = 4.0000e-10
    k[145] = 2.5000e-09
    k[146] = 1.5000e-09
    k[147] = 1.0000e-09
    k[148] = 1.5000e-10 * np.exp(-4.8100e02 * invt)
    k[149] = 2.2000e-10
    k[150] = 4.9000e-09 * tgas32 ** (-0.50)
    k[151] = 3.1600e-10 * tgas32 ** (-0.50)
    k[152] = 5.2000e-09 * tgas32 ** (-0.50)
    k[153] = 7.9700e-10 * tgas32 ** (-0.50)
    k[154] = 2.4000e-09 * tgas32 ** (-0.50)
    k[155] = 1.7000e-17
    k[156] = 2.5000e-18
    k[157] = 4.0000e-16 * tgas32 ** (-0.20)
    k[158] = 2.0000e-20 * tgas32 ** (1.00)
    k[159] = 1.3000e-14 * tgas32 ** (-1.00)
    k[160] = 2.0000e-11 * tgas32 ** (0.44)
    k[161] = 4.7000e-11 * tgas32 ** (-0.34)
    k[162] = 1.0000e-10
    k[163] = 2.6900e-12 * np.exp(-2.3600e04 * invt)
    k[164] = 2.7000e-11 * tgas32 ** (0.38)
    k[165] = 2.7000e-10
    k[166] = 1.0000e-10 * np.exp(-7.6000e03 * invt)
    k[167] = 7.3400e-12 * np.exp(-4.4100e03 * invt)
    k[168] = 6.8600e-14 * tgas32 ** (2.80) * np.exp(-1.9500e03 * invt)
    k[169] = 6.8200e-12 * tgas32 ** (1.60) * np.exp(-9.7200e03 * invt)
    k[170] = 2.9400e-10 * np.exp(-8.3800e03 * invt)
    k[171] = 6.6400e-10 * np.exp(-1.1700e04 * invt)
    k[172] = 3.7500e-10 * np.exp(-1.6600e03 * invt)
    k[173] = 5.0000e-11 * np.exp(-4.8700e03 * invt)
    k[174] = 2.5100e-13 * np.exp(-4.2100e03 * invt)
    k[175] = 3.4400e-13 * tgas32 ** (2.67) * np.exp(-3.1600e03 * invt)
    k[176] = 8.4000e-13 * np.exp(-1.0400e03 * invt)
    k[177] = 6.6000e-11
    k[178] = 3.5000e-11
    k[179] = 1.2000e-10
    k[180] = 8.0000e-11
    k[181] = 3.8000e-11 * tgas32 ** (-0.48)
    k[182] = 1.6500e-12 * tgas32 ** (1.14) * np.exp(-5.0000e01 * invt)
    k[183] = 1.0000e-17
    k[184] = 2.1000e-19
    k[185] = 1.0000e-17
    k[186] = 9.9000e-19 * tgas32 ** (-0.38)
    k[187] = 4.9000e-20 * tgas32 ** (1.58)
    k[188] = 3.2500e-17 * tgas32 ** (-0.60)
    k[189] = 4.0000e-18 * tgas32 ** (-2.00)
    k[190] = 7.0000e-08 * tgas32 ** (-0.50)
    k[191] = 2.7500e-07 * tgas32 ** (-0.55)
    k[192] = 2.5300e-07 * tgas32 ** (-0.50)
    k[193] = 1.9500e-07 * tgas32 ** (-0.70)
    k[194] = 6.3000e-09 * tgas32 ** (-0.48)
    k[195] = 7.7000e-08 * tgas32 ** (-0.60)
    k[196] = 1.6000e-07 * tgas32 ** (-0.60)
    k[197] = 4.0000e-07 * tgas32 ** (-0.60)
    k[198] = 3.9000e-08 * tgas32 ** (-0.50)
    k[199] = 8.6000e-08 * tgas32 ** (-0.50)
    k[200] = 3.0500e-07 * tgas32 ** (-0.50)
    k[201] = 4.3600e-08 * tgas32 ** (-0.52)
    k[202] = 2.3400e-08 * tgas32 ** (-0.52)
    k[203] = 2.8000e-07 * tgas32 ** (-0.69)
    k[204] = 3.0000e-07 * tgas32 ** (-0.30)
    k[205] = 1.6000e-07 * tgas32 ** (-0.30)
    k[206] = 1.4000e-07 * tgas32 ** (-0.30)
    k[207] = 4.0000e-07 * tgas32 ** (-0.30)
    k[208] = 2.6000e-07 * tgas32 ** (-0.50)
    k[209] = 1.1000e-07 * tgas32 ** (-0.50)
    k[210] = 6.0000e-08 * tgas32 ** (-0.50)
    k[211] = 5.6000e-09 * tgas32 ** (-0.50)
    k[212] = 3.0000e-07 * tgas32 ** (-0.50)
    k[213] = 3.0000e-07 * tgas32 ** (-0.50)
    k[214] = 1.4000e-08 * tgas32 ** (-0.52)
    k[215] = 1.4000e-08 * tgas32 ** (-0.52)
    k[216] = 1.9500e-07 * tgas32 ** (-0.52)
    k[217] = 4.8000e-08 * tgas32 ** (-0.52)
    k[218] = 3.0000e-09 * tgas32 ** (-0.52)
    k[219] = 4.4000e-12 * tgas32 ** (-0.61)
    k[220] = 3.5000e-12 * tgas32 ** (-0.70)
    k[221] = 3.4000e-12 * tgas32 ** (-0.63)
    k[222] = 2.2500e-07 * tgas32 ** (-0.40)
    k[223] = 1.1000e-10 * tgas32 ** (-0.70)

    # Compute derivatives for each species
    y = np.power(10, y)
    dn = np.zeros_like(y)
    dn[0] = (
        -1 * (k[1] * y[0])
        + 1 * (k[4] * y[2])
        + 1 * (k[5] * y[11])
        + 1 * (k[18] * y[3])
        + 1 * (k[19] * y[1] * y[2])
        + 1 * (k[23] * y[1] * y[4])
        + 1 * (k[25] * y[1] * y[6])
        + 1 * (k[54] * y[3] * y[18])
        - 1 * (k[55] * y[12] * y[0])
        + 1 * (k[59] * y[12] * y[2])
        - 1 * (k[70] * y[17] * y[0])
        - 1 * (k[88] * y[26] * y[0])
        - 1 * (k[89] * y[26] * y[0])
        - 1 * (k[93] * y[28] * y[0])
        - 1 * (k[110] * y[19] * y[0])
        - 1 * (k[122] * y[20] * y[0])
        - 1 * (k[131] * y[22] * y[0])
        - 1 * (k[137] * y[21] * y[0])
        - 1 * (k[147] * y[10] * y[0])
        - 1 * (k[161] * y[0] * y[25])
        - 1 * (k[162] * y[0] * y[27])
        - 1 * (k[163] * y[0] * y[4])
        + 1 * (k[164] * y[14] * y[2])
        - 1 * (k[171] * y[16] * y[0])
        - 1 * (k[183] * y[0] * y[14])
        - 1 * (k[184] * y[0] * y[23])
        - 1 * (k[185] * y[0] * y[16])
        + 1 * (k[190] * y[3] * y[13])
        + 1 * (k[191] * y[12] * y[13])
        + 1 * (k[195] * y[5] * y[13])
        + 1 * (k[197] * y[5] * y[13])
        + 1 * (k[204] * y[7] * y[13])
        + 1 * (k[219] * y[1] * y[13])
    )
    dn[1] = (
        1 * (k[1] * y[0])
        - 1 * (k[19] * y[1] * y[2])
        - 1 * (k[20] * y[1] * y[25])
        - 1 * (k[21] * y[1] * y[25])
        - 1 * (k[22] * y[1] * y[27])
        - 1 * (k[23] * y[1] * y[4])
        - 1 * (k[24] * y[1] * y[18])
        - 1 * (k[25] * y[1] * y[6])
        + 1 * (k[47] * y[3] * y[14])
        + 1 * (k[55] * y[12] * y[0])
        + 1 * (k[88] * y[26] * y[0])
        - 1 * (k[155] * y[1] * y[14])
        - 1 * (k[156] * y[1] * y[23])
        - 1 * (k[157] * y[1] * y[16])
        - 1 * (k[219] * y[1] * y[13])
    )
    dn[2] = (
        -1 * (k[4] * y[2])
        - 1 * (k[19] * y[1] * y[2])
        - 1 * (k[27] * y[15] * y[2])
        - 1 * (k[37] * y[24] * y[2])
        - 1 * (k[38] * y[24] * y[2])
        - 1 * (k[58] * y[12] * y[2])
        - 1 * (k[59] * y[12] * y[2])
        + 1 * (k[65] * y[12] * y[4])
        - 1 * (k[73] * y[17] * y[2])
        - 1 * (k[74] * y[17] * y[2])
        - 1 * (k[90] * y[26] * y[2])
        - 1 * (k[91] * y[26] * y[2])
        - 1 * (k[95] * y[28] * y[2])
        - 1 * (k[96] * y[28] * y[2])
        - 1 * (k[112] * y[19] * y[2])
        - 1 * (k[113] * y[19] * y[2])
        - 1 * (k[124] * y[20] * y[2])
        - 1 * (k[132] * y[22] * y[2])
        - 1 * (k[138] * y[21] * y[2])
        - 1 * (k[150] * y[10] * y[2])
        - 1 * (k[160] * y[23] * y[2])
        + 2 * (k[163] * y[0] * y[4])
        - 1 * (k[164] * y[14] * y[2])
        + 1 * (k[165] * y[14] * y[4])
        + 1 * (k[171] * y[16] * y[0])
        - 1 * (k[172] * y[16] * y[2])
        - 1 * (k[177] * y[23] * y[2])
        - 1 * (k[181] * y[2] * y[25])
        + 1 * (k[183] * y[0] * y[14])
        - 1 * (k[188] * y[2] * y[16])
        + 1 * (k[196] * y[5] * y[13])
        + 1 * (k[205] * y[7] * y[13])
        + 1 * (k[206] * y[7] * y[13])
        + 1 * (k[218] * y[10] * y[13])
    )
    dn[3] = (
        -1 * (k[18] * y[3])
        + 1 * (k[19] * y[1] * y[2])
        + 1 * (k[27] * y[15] * y[2])
        + 1 * (k[30] * y[15] * y[4])
        + 1 * (k[37] * y[24] * y[2])
        - 1 * (k[47] * y[3] * y[14])
        - 1 * (k[48] * y[3] * y[23])
        - 1 * (k[49] * y[3] * y[16])
        - 1 * (k[50] * y[3] * y[25])
        - 1 * (k[51] * y[3] * y[25])
        - 1 * (k[52] * y[3] * y[27])
        - 1 * (k[53] * y[3] * y[18])
        - 1 * (k[54] * y[3] * y[18])
        + 1 * (k[58] * y[12] * y[2])
        + 1 * (k[70] * y[17] * y[0])
        + 1 * (k[73] * y[17] * y[2])
        + 1 * (k[90] * y[26] * y[2])
        + 1 * (k[93] * y[28] * y[0])
        + 1 * (k[95] * y[28] * y[2])
        + 1 * (k[110] * y[19] * y[0])
        + 1 * (k[112] * y[19] * y[2])
        + 1 * (k[122] * y[20] * y[0])
        + 1 * (k[131] * y[22] * y[0])
        + 1 * (k[147] * y[10] * y[0])
        + 1 * (k[155] * y[1] * y[14])
        - 1 * (k[190] * y[3] * y[13])
    )
    dn[4] = (
        -1 * (k[13] * y[4])
        + 1 * (k[15] * y[6])
        + 1 * (k[17] * y[8])
        - 1 * (k[23] * y[1] * y[4])
        - 1 * (k[30] * y[15] * y[4])
        - 1 * (k[31] * y[15] * y[4])
        - 1 * (k[43] * y[24] * y[4])
        - 1 * (k[64] * y[12] * y[4])
        - 1 * (k[65] * y[12] * y[4])
        - 1 * (k[81] * y[17] * y[4])
        - 1 * (k[82] * y[17] * y[4])
        - 1 * (k[92] * y[26] * y[4])
        - 1 * (k[101] * y[28] * y[4])
        - 1 * (k[102] * y[28] * y[4])
        + 1 * (k[105] * y[28] * y[8])
        - 1 * (k[118] * y[19] * y[4])
        - 1 * (k[119] * y[19] * y[4])
        - 1 * (k[127] * y[20] * y[4])
        - 1 * (k[134] * y[22] * y[4])
        - 1 * (k[139] * y[21] * y[4])
        + 1 * (k[149] * y[10] * y[23])
        - 1 * (k[153] * y[10] * y[4])
        - 1 * (k[163] * y[0] * y[4])
        - 1 * (k[165] * y[14] * y[4])
        + 1 * (k[166] * y[14] * y[6])
        + 1 * (k[172] * y[16] * y[2])
        - 1 * (k[173] * y[16] * y[4])
        - 1 * (k[179] * y[23] * y[4])
        - 1 * (k[180] * y[23] * y[4])
        + 1 * (k[185] * y[0] * y[16])
        + 1 * (k[207] * y[7] * y[13])
        + 1 * (k[212] * y[9] * y[13])
        + 1 * (k[217] * y[10] * y[13])
    )
    dn[5] = (
        1 * (k[13] * y[4])
        + 1 * (k[23] * y[1] * y[4])
        + 1 * (k[31] * y[15] * y[4])
        + 1 * (k[43] * y[24] * y[4])
        + 1 * (k[49] * y[3] * y[16])
        + 1 * (k[64] * y[12] * y[4])
        + 1 * (k[74] * y[17] * y[2])
        + 1 * (k[81] * y[17] * y[4])
        + 1 * (k[92] * y[26] * y[4])
        + 1 * (k[96] * y[28] * y[2])
        + 1 * (k[101] * y[28] * y[4])
        - 1 * (k[107] * y[5] * y[23])
        - 1 * (k[108] * y[5] * y[16])
        - 1 * (k[109] * y[5] * y[25])
        + 1 * (k[113] * y[19] * y[2])
        + 1 * (k[118] * y[19] * y[4])
        + 1 * (k[124] * y[20] * y[2])
        + 1 * (k[132] * y[22] * y[2])
        + 1 * (k[138] * y[21] * y[2])
        + 1 * (k[150] * y[10] * y[2])
        + 1 * (k[157] * y[1] * y[16])
        - 1 * (k[195] * y[5] * y[13])
        - 1 * (k[196] * y[5] * y[13])
        - 1 * (k[197] * y[5] * y[13])
    )
    dn[6] = (
        -1 * (k[15] * y[6])
        - 1 * (k[16] * y[6])
        - 1 * (k[25] * y[1] * y[6])
        - 1 * (k[33] * y[15] * y[6])
        + 1 * (k[68] * y[12] * y[8])
        + 1 * (k[121] * y[19] * y[8])
        - 1 * (k[129] * y[20] * y[6])
        + 1 * (k[142] * y[9] * y[11])
        + 1 * (k[145] * y[9] * y[18])
        + 1 * (k[146] * y[9] * y[8])
        - 1 * (k[166] * y[14] * y[6])
        + 1 * (k[167] * y[14] * y[8])
        + 1 * (k[173] * y[16] * y[4])
        - 1 * (k[174] * y[16] * y[6])
        + 1 * (k[188] * y[2] * y[16])
        + 1 * (k[213] * y[9] * y[13])
        + 1 * (k[214] * y[10] * y[13])
        + 1 * (k[216] * y[10] * y[13])
        + 1 * (k[223] * y[7] * y[13])
    )
    dn[7] = (
        1 * (k[16] * y[6])
        + 1 * (k[25] * y[1] * y[6])
        + 1 * (k[33] * y[15] * y[6])
        + 1 * (k[34] * y[15] * y[8])
        + 1 * (k[45] * y[24] * y[8])
        + 1 * (k[82] * y[17] * y[4])
        + 1 * (k[85] * y[17] * y[8])
        + 1 * (k[102] * y[28] * y[4])
        + 1 * (k[108] * y[5] * y[16])
        + 1 * (k[119] * y[19] * y[4])
        + 1 * (k[127] * y[20] * y[4])
        + 1 * (k[134] * y[22] * y[4])
        - 1 * (k[136] * y[7] * y[23])
        + 1 * (k[139] * y[21] * y[4])
        + 1 * (k[140] * y[9] * y[14])
        + 1 * (k[141] * y[9] * y[23])
        + 1 * (k[153] * y[10] * y[4])
        - 1 * (k[159] * y[7] * y[16])
        - 1 * (k[204] * y[7] * y[13])
        - 1 * (k[205] * y[7] * y[13])
        - 1 * (k[206] * y[7] * y[13])
        - 1 * (k[207] * y[7] * y[13])
        - 1 * (k[223] * y[7] * y[13])
    )
    dn[8] = (
        -1 * (k[17] * y[8])
        - 1 * (k[34] * y[15] * y[8])
        - 1 * (k[35] * y[15] * y[8])
        - 1 * (k[45] * y[24] * y[8])
        - 1 * (k[46] * y[24] * y[8])
        - 1 * (k[68] * y[12] * y[8])
        - 1 * (k[69] * y[12] * y[8])
        - 1 * (k[85] * y[17] * y[8])
        - 1 * (k[86] * y[17] * y[8])
        - 1 * (k[87] * y[17] * y[8])
        - 1 * (k[105] * y[28] * y[8])
        - 1 * (k[106] * y[28] * y[8])
        - 1 * (k[121] * y[19] * y[8])
        - 1 * (k[130] * y[20] * y[8])
        + 1 * (k[144] * y[9] * y[25])
        - 1 * (k[146] * y[9] * y[8])
        + 1 * (k[147] * y[10] * y[0])
        + 1 * (k[150] * y[10] * y[2])
        + 1 * (k[151] * y[10] * y[11])
        + 1 * (k[152] * y[10] * y[27])
        + 1 * (k[153] * y[10] * y[4])
        + 1 * (k[154] * y[10] * y[18])
        - 1 * (k[167] * y[14] * y[8])
        + 1 * (k[174] * y[16] * y[6])
        + 1 * (k[215] * y[10] * y[13])
    )
    dn[9] = (
        1 * (k[35] * y[15] * y[8])
        + 1 * (k[46] * y[24] * y[8])
        + 1 * (k[69] * y[12] * y[8])
        + 1 * (k[86] * y[17] * y[8])
        + 1 * (k[129] * y[20] * y[6])
        - 1 * (k[140] * y[9] * y[14])
        - 1 * (k[141] * y[9] * y[23])
        - 1 * (k[142] * y[9] * y[11])
        - 1 * (k[143] * y[9] * y[16])
        - 1 * (k[144] * y[9] * y[25])
        - 1 * (k[145] * y[9] * y[18])
        - 1 * (k[146] * y[9] * y[8])
        + 1 * (k[148] * y[10] * y[14])
        - 1 * (k[212] * y[9] * y[13])
        - 1 * (k[213] * y[9] * y[13])
    )
    dn[10] = (
        1 * (k[87] * y[17] * y[8])
        + 1 * (k[106] * y[28] * y[8])
        + 1 * (k[130] * y[20] * y[8])
        + 1 * (k[143] * y[9] * y[16])
        + 1 * (k[146] * y[9] * y[8])
        - 1 * (k[147] * y[10] * y[0])
        - 1 * (k[148] * y[10] * y[14])
        - 1 * (k[149] * y[10] * y[23])
        - 1 * (k[150] * y[10] * y[2])
        - 1 * (k[151] * y[10] * y[11])
        - 1 * (k[152] * y[10] * y[27])
        - 1 * (k[153] * y[10] * y[4])
        - 1 * (k[154] * y[10] * y[18])
        + 1 * (k[159] * y[7] * y[16])
        - 1 * (k[214] * y[10] * y[13])
        - 1 * (k[215] * y[10] * y[13])
        - 1 * (k[216] * y[10] * y[13])
        - 1 * (k[217] * y[10] * y[13])
        - 1 * (k[218] * y[10] * y[13])
    )
    dn[11] = (
        -1 * (k[5] * y[11])
        - 1 * (k[6] * y[11])
        + 1 * (k[20] * y[1] * y[25])
        + 1 * (k[55] * y[12] * y[0])
        + 1 * (k[56] * y[12] * y[14])
        + 1 * (k[57] * y[12] * y[23])
        + 1 * (k[58] * y[12] * y[2])
        + 1 * (k[61] * y[12] * y[25])
        + 1 * (k[62] * y[12] * y[27])
        + 1 * (k[64] * y[12] * y[4])
        + 1 * (k[66] * y[12] * y[18])
        + 1 * (k[69] * y[12] * y[8])
        - 1 * (k[75] * y[17] * y[11])
        - 1 * (k[76] * y[17] * y[11])
        - 1 * (k[97] * y[28] * y[11])
        - 1 * (k[114] * y[19] * y[11])
        - 1 * (k[125] * y[20] * y[11])
        + 1 * (k[131] * y[22] * y[0])
        + 1 * (k[132] * y[22] * y[2])
        + 1 * (k[133] * y[22] * y[27])
        + 1 * (k[134] * y[22] * y[4])
        + 1 * (k[135] * y[22] * y[18])
        - 1 * (k[142] * y[9] * y[11])
        - 1 * (k[151] * y[10] * y[11])
        + 1 * (k[161] * y[0] * y[25])
        + 1 * (k[162] * y[0] * y[27])
        + 1 * (k[177] * y[23] * y[2])
        + 1 * (k[179] * y[23] * y[4])
        + 1 * (k[180] * y[23] * y[4])
        + 1 * (k[181] * y[2] * y[25])
        + 1 * (k[184] * y[0] * y[23])
        + 1 * (k[203] * y[22] * y[13])
    )
    dn[12] = (
        1 * (k[6] * y[11])
        + 1 * (k[21] * y[1] * y[25])
        + 1 * (k[22] * y[1] * y[27])
        + 1 * (k[38] * y[24] * y[2])
        + 1 * (k[48] * y[3] * y[23])
        + 1 * (k[50] * y[3] * y[25])
        + 1 * (k[52] * y[3] * y[27])
        - 1 * (k[55] * y[12] * y[0])
        - 1 * (k[56] * y[12] * y[14])
        - 1 * (k[57] * y[12] * y[23])
        - 1 * (k[58] * y[12] * y[2])
        - 1 * (k[59] * y[12] * y[2])
        - 1 * (k[60] * y[12] * y[16])
        - 1 * (k[61] * y[12] * y[25])
        - 1 * (k[62] * y[12] * y[27])
        - 1 * (k[63] * y[12] * y[27])
        - 1 * (k[64] * y[12] * y[4])
        - 1 * (k[65] * y[12] * y[4])
        - 1 * (k[66] * y[12] * y[18])
        - 1 * (k[67] * y[12] * y[18])
        - 1 * (k[68] * y[12] * y[8])
        - 1 * (k[69] * y[12] * y[8])
        + 1 * (k[75] * y[17] * y[11])
        + 1 * (k[89] * y[26] * y[0])
        + 1 * (k[156] * y[1] * y[23])
        - 1 * (k[191] * y[12] * y[13])
    )
    dn[13] = (
        1 * (k[1] * y[0])
        + 1 * (k[2] * y[14])
        + 1 * (k[3] * y[23])
        + 1 * (k[6] * y[11])
        + 1 * (k[8] * y[16])
        + 1 * (k[9] * y[16])
        + 1 * (k[11] * y[25])
        + 1 * (k[13] * y[4])
        + 1 * (k[16] * y[6])
        + 1 * (k[160] * y[23] * y[2])
        - 1 * (k[190] * y[3] * y[13])
        - 1 * (k[191] * y[12] * y[13])
        - 1 * (k[192] * y[17] * y[13])
        - 1 * (k[193] * y[26] * y[13])
        - 1 * (k[194] * y[28] * y[13])
        - 1 * (k[195] * y[5] * y[13])
        - 1 * (k[196] * y[5] * y[13])
        - 1 * (k[197] * y[5] * y[13])
        - 1 * (k[198] * y[19] * y[13])
        - 1 * (k[199] * y[19] * y[13])
        - 1 * (k[200] * y[19] * y[13])
        - 1 * (k[201] * y[20] * y[13])
        - 1 * (k[202] * y[20] * y[13])
        - 1 * (k[203] * y[22] * y[13])
        - 1 * (k[204] * y[7] * y[13])
        - 1 * (k[205] * y[7] * y[13])
        - 1 * (k[206] * y[7] * y[13])
        - 1 * (k[207] * y[7] * y[13])
        - 1 * (k[208] * y[21] * y[13])
        - 1 * (k[209] * y[21] * y[13])
        - 1 * (k[210] * y[21] * y[13])
        - 1 * (k[211] * y[21] * y[13])
        - 1 * (k[212] * y[9] * y[13])
        - 1 * (k[213] * y[9] * y[13])
        - 1 * (k[214] * y[10] * y[13])
        - 1 * (k[215] * y[10] * y[13])
        - 1 * (k[216] * y[10] * y[13])
        - 1 * (k[217] * y[10] * y[13])
        - 1 * (k[218] * y[10] * y[13])
        - 1 * (k[219] * y[1] * y[13])
        - 1 * (k[220] * y[15] * y[13])
        - 1 * (k[221] * y[24] * y[13])
        - 1 * (k[222] * y[17] * y[13])
        - 1 * (k[223] * y[7] * y[13])
    )
    dn[14] = (
        -2 * (k[0] * y[14] * y[14])
        - 1 * (k[2] * y[14])
        + 1 * (k[4] * y[2])
        + 2 * (k[7] * y[16])
        + 1 * (k[8] * y[16])
        + 1 * (k[12] * y[27])
        + 1 * (k[14] * y[18])
        + 1 * (k[15] * y[6])
        + 1 * (k[22] * y[1] * y[27])
        + 1 * (k[24] * y[1] * y[18])
        + 1 * (k[26] * y[15] * y[23])
        + 1 * (k[27] * y[15] * y[2])
        + 1 * (k[28] * y[15] * y[25])
        + 1 * (k[29] * y[15] * y[27])
        + 1 * (k[31] * y[15] * y[4])
        + 1 * (k[32] * y[15] * y[18])
        + 1 * (k[33] * y[15] * y[6])
        + 1 * (k[35] * y[15] * y[8])
        - 1 * (k[36] * y[24] * y[14])
        + 1 * (k[38] * y[24] * y[2])
        + 1 * (k[39] * y[24] * y[16])
        + 1 * (k[41] * y[24] * y[27])
        - 1 * (k[47] * y[3] * y[14])
        + 1 * (k[48] * y[3] * y[23])
        + 1 * (k[49] * y[3] * y[16])
        - 1 * (k[56] * y[12] * y[14])
        + 1 * (k[60] * y[12] * y[16])
        + 1 * (k[70] * y[17] * y[0])
        - 1 * (k[71] * y[17] * y[14])
        + 1 * (k[72] * y[17] * y[23])
        + 1 * (k[74] * y[17] * y[2])
        + 1 * (k[76] * y[17] * y[11])
        + 1 * (k[77] * y[17] * y[16])
        + 1 * (k[80] * y[17] * y[27])
        + 1 * (k[82] * y[17] * y[4])
        + 1 * (k[84] * y[17] * y[18])
        + 1 * (k[85] * y[17] * y[8])
        + 1 * (k[87] * y[17] * y[8])
        + 1 * (k[94] * y[28] * y[23])
        + 1 * (k[98] * y[28] * y[16])
        + 1 * (k[107] * y[5] * y[23])
        + 1 * (k[108] * y[5] * y[16])
        + 1 * (k[115] * y[19] * y[16])
        - 1 * (k[140] * y[9] * y[14])
        + 1 * (k[143] * y[9] * y[16])
        - 1 * (k[148] * y[10] * y[14])
        - 1 * (k[155] * y[1] * y[14])
        - 1 * (k[158] * y[15] * y[14])
        + 1 * (k[162] * y[0] * y[27])
        - 1 * (k[164] * y[14] * y[2])
        - 1 * (k[165] * y[14] * y[4])
        - 1 * (k[166] * y[14] * y[6])
        - 1 * (k[167] * y[14] * y[8])
        - 1 * (k[168] * y[14] * y[27])
        - 1 * (k[169] * y[14] * y[18])
        - 1 * (k[170] * y[14] * y[25])
        + 1 * (k[171] * y[16] * y[0])
        + 1 * (k[172] * y[16] * y[2])
        + 1 * (k[173] * y[16] * y[4])
        + 1 * (k[174] * y[16] * y[6])
        + 1 * (k[175] * y[16] * y[23])
        + 1 * (k[176] * y[16] * y[27])
        + 1 * (k[177] * y[23] * y[2])
        + 1 * (k[178] * y[23] * y[27])
        + 2 * (k[179] * y[23] * y[4])
        - 1 * (k[183] * y[0] * y[14])
        - 1 * (k[186] * y[14] * y[23])
        - 1 * (k[189] * y[14] * y[27])
        + 1 * (k[190] * y[3] * y[13])
        + 2 * (k[192] * y[17] * y[13])
        + 1 * (k[194] * y[28] * y[13])
        + 1 * (k[196] * y[5] * y[13])
        + 2 * (k[197] * y[5] * y[13])
        + 1 * (k[199] * y[19] * y[13])
        + 2 * (k[200] * y[19] * y[13])
        + 3 * (k[201] * y[20] * y[13])
        + 1 * (k[202] * y[20] * y[13])
        + 1 * (k[203] * y[22] * y[13])
        + 1 * (k[204] * y[7] * y[13])
        + 2 * (k[205] * y[7] * y[13])
        + 1 * (k[207] * y[7] * y[13])
        + 2 * (k[208] * y[21] * y[13])
        + 1 * (k[209] * y[21] * y[13])
        + 1 * (k[211] * y[21] * y[13])
        + 2 * (k[212] * y[9] * y[13])
        + 1 * (k[213] * y[9] * y[13])
        + 1 * (k[215] * y[10] * y[13])
        + 2 * (k[216] * y[10] * y[13])
        + 1 * (k[217] * y[10] * y[13])
        + 1 * (k[220] * y[15] * y[13])
    )
    dn[15] = (
        1 * (k[2] * y[14])
        + 1 * (k[8] * y[16])
        + 1 * (k[18] * y[3])
        - 1 * (k[26] * y[15] * y[23])
        - 1 * (k[27] * y[15] * y[2])
        - 1 * (k[28] * y[15] * y[25])
        - 1 * (k[29] * y[15] * y[27])
        - 1 * (k[30] * y[15] * y[4])
        - 1 * (k[31] * y[15] * y[4])
        - 1 * (k[32] * y[15] * y[18])
        - 1 * (k[33] * y[15] * y[6])
        - 1 * (k[34] * y[15] * y[8])
        - 1 * (k[35] * y[15] * y[8])
        + 1 * (k[36] * y[24] * y[14])
        + 1 * (k[56] * y[12] * y[14])
        + 1 * (k[71] * y[17] * y[14])
        - 1 * (k[158] * y[15] * y[14])
        - 1 * (k[220] * y[15] * y[13])
    )
    dn[16] = (
        1 * (k[0] * y[14] * y[14])
        - 1 * (k[7] * y[16])
        - 1 * (k[8] * y[16])
        - 1 * (k[9] * y[16])
        + 1 * (k[17] * y[8])
        + 1 * (k[30] * y[15] * y[4])
        + 1 * (k[34] * y[15] * y[8])
        - 1 * (k[39] * y[24] * y[16])
        + 1 * (k[47] * y[3] * y[14])
        - 1 * (k[49] * y[3] * y[16])
        + 1 * (k[52] * y[3] * y[27])
        + 1 * (k[53] * y[3] * y[18])
        - 1 * (k[60] * y[12] * y[16])
        + 1 * (k[71] * y[17] * y[14])
        + 1 * (k[73] * y[17] * y[2])
        + 1 * (k[75] * y[17] * y[11])
        - 1 * (k[77] * y[17] * y[16])
        + 1 * (k[78] * y[17] * y[25])
        + 1 * (k[79] * y[17] * y[27])
        + 1 * (k[81] * y[17] * y[4])
        + 1 * (k[83] * y[17] * y[18])
        + 1 * (k[85] * y[17] * y[8])
        + 1 * (k[86] * y[17] * y[8])
        - 1 * (k[98] * y[28] * y[16])
        - 1 * (k[108] * y[5] * y[16])
        + 1 * (k[111] * y[19] * y[23])
        - 1 * (k[115] * y[19] * y[16])
        + 1 * (k[122] * y[20] * y[0])
        + 1 * (k[123] * y[20] * y[23])
        + 1 * (k[124] * y[20] * y[2])
        + 1 * (k[125] * y[20] * y[11])
        + 1 * (k[126] * y[20] * y[27])
        + 1 * (k[127] * y[20] * y[4])
        + 1 * (k[128] * y[20] * y[18])
        + 1 * (k[129] * y[20] * y[6])
        + 1 * (k[130] * y[20] * y[8])
        + 1 * (k[136] * y[7] * y[23])
        + 1 * (k[137] * y[21] * y[0])
        + 1 * (k[140] * y[9] * y[14])
        - 1 * (k[143] * y[9] * y[16])
        + 1 * (k[148] * y[10] * y[14])
        - 1 * (k[157] * y[1] * y[16])
        - 1 * (k[159] * y[7] * y[16])
        + 1 * (k[164] * y[14] * y[2])
        + 1 * (k[165] * y[14] * y[4])
        + 1 * (k[166] * y[14] * y[6])
        + 1 * (k[167] * y[14] * y[8])
        + 1 * (k[168] * y[14] * y[27])
        + 1 * (k[169] * y[14] * y[18])
        - 1 * (k[171] * y[16] * y[0])
        - 1 * (k[172] * y[16] * y[2])
        - 1 * (k[173] * y[16] * y[4])
        - 1 * (k[174] * y[16] * y[6])
        - 1 * (k[175] * y[16] * y[23])
        - 1 * (k[176] * y[16] * y[27])
        + 1 * (k[180] * y[23] * y[4])
        - 1 * (k[185] * y[0] * y[16])
        - 1 * (k[188] * y[2] * y[16])
        + 1 * (k[195] * y[5] * y[13])
        + 1 * (k[198] * y[19] * y[13])
        + 1 * (k[202] * y[20] * y[13])
        + 1 * (k[204] * y[7] * y[13])
        + 1 * (k[206] * y[7] * y[13])
        + 1 * (k[210] * y[21] * y[13])
        + 1 * (k[211] * y[21] * y[13])
        + 1 * (k[214] * y[10] * y[13])
        + 1 * (k[217] * y[10] * y[13])
        + 2 * (k[218] * y[10] * y[13])
        + 1 * (k[222] * y[17] * y[13])
    )
    dn[17] = (
        1 * (k[9] * y[16])
        - 1 * (k[70] * y[17] * y[0])
        - 1 * (k[71] * y[17] * y[14])
        - 1 * (k[72] * y[17] * y[23])
        - 1 * (k[73] * y[17] * y[2])
        - 1 * (k[74] * y[17] * y[2])
        - 1 * (k[75] * y[17] * y[11])
        - 1 * (k[76] * y[17] * y[11])
        - 1 * (k[77] * y[17] * y[16])
        - 1 * (k[78] * y[17] * y[25])
        - 1 * (k[79] * y[17] * y[27])
        - 1 * (k[80] * y[17] * y[27])
        - 1 * (k[81] * y[17] * y[4])
        - 1 * (k[82] * y[17] * y[4])
        - 1 * (k[83] * y[17] * y[18])
        - 1 * (k[84] * y[17] * y[18])
        - 1 * (k[85] * y[17] * y[8])
        - 1 * (k[86] * y[17] * y[8])
        - 1 * (k[87] * y[17] * y[8])
        + 1 * (k[158] * y[15] * y[14])
        - 1 * (k[192] * y[17] * y[13])
        - 1 * (k[222] * y[17] * y[13])
    )
    dn[18] = (
        -1 * (k[14] * y[18])
        - 1 * (k[24] * y[1] * y[18])
        - 1 * (k[32] * y[15] * y[18])
        - 1 * (k[44] * y[24] * y[18])
        - 1 * (k[53] * y[3] * y[18])
        - 1 * (k[54] * y[3] * y[18])
        - 1 * (k[66] * y[12] * y[18])
        - 1 * (k[67] * y[12] * y[18])
        - 1 * (k[83] * y[17] * y[18])
        - 1 * (k[84] * y[17] * y[18])
        - 1 * (k[103] * y[28] * y[18])
        - 1 * (k[104] * y[28] * y[18])
        + 1 * (k[112] * y[19] * y[2])
        + 1 * (k[116] * y[19] * y[25])
        + 1 * (k[118] * y[19] * y[4])
        - 1 * (k[120] * y[19] * y[18])
        - 1 * (k[128] * y[20] * y[18])
        - 1 * (k[135] * y[22] * y[18])
        + 1 * (k[138] * y[21] * y[2])
        + 1 * (k[139] * y[21] * y[4])
        - 1 * (k[145] * y[9] * y[18])
        - 1 * (k[154] * y[10] * y[18])
        - 1 * (k[169] * y[14] * y[18])
        + 1 * (k[176] * y[16] * y[27])
        + 1 * (k[182] * y[27] * y[27])
        + 1 * (k[189] * y[14] * y[27])
        + 1 * (k[209] * y[21] * y[13])
    )
    dn[19] = (
        1 * (k[32] * y[15] * y[18])
        + 1 * (k[44] * y[24] * y[18])
        + 1 * (k[66] * y[12] * y[18])
        + 1 * (k[80] * y[17] * y[27])
        + 1 * (k[83] * y[17] * y[18])
        + 1 * (k[98] * y[28] * y[16])
        + 1 * (k[100] * y[28] * y[27])
        + 1 * (k[103] * y[28] * y[18])
        - 1 * (k[110] * y[19] * y[0])
        - 1 * (k[111] * y[19] * y[23])
        - 1 * (k[112] * y[19] * y[2])
        - 1 * (k[113] * y[19] * y[2])
        - 1 * (k[114] * y[19] * y[11])
        - 1 * (k[115] * y[19] * y[16])
        - 1 * (k[116] * y[19] * y[25])
        - 1 * (k[117] * y[19] * y[27])
        - 1 * (k[118] * y[19] * y[4])
        - 1 * (k[119] * y[19] * y[4])
        - 1 * (k[120] * y[19] * y[18])
        - 1 * (k[121] * y[19] * y[8])
        + 1 * (k[126] * y[20] * y[27])
        + 1 * (k[133] * y[22] * y[27])
        + 1 * (k[152] * y[10] * y[27])
        - 1 * (k[198] * y[19] * y[13])
        - 1 * (k[199] * y[19] * y[13])
        - 1 * (k[200] * y[19] * y[13])
    )
    dn[20] = (
        1 * (k[77] * y[17] * y[16])
        - 1 * (k[122] * y[20] * y[0])
        - 1 * (k[123] * y[20] * y[23])
        - 1 * (k[124] * y[20] * y[2])
        - 1 * (k[125] * y[20] * y[11])
        - 1 * (k[126] * y[20] * y[27])
        - 1 * (k[127] * y[20] * y[4])
        - 1 * (k[128] * y[20] * y[18])
        - 1 * (k[129] * y[20] * y[6])
        - 1 * (k[130] * y[20] * y[8])
        - 1 * (k[201] * y[20] * y[13])
        - 1 * (k[202] * y[20] * y[13])
    )
    dn[21] = (
        1 * (k[54] * y[3] * y[18])
        + 1 * (k[84] * y[17] * y[18])
        + 1 * (k[104] * y[28] * y[18])
        + 1 * (k[105] * y[28] * y[8])
        + 1 * (k[115] * y[19] * y[16])
        + 1 * (k[117] * y[19] * y[27])
        + 1 * (k[120] * y[19] * y[18])
        + 1 * (k[121] * y[19] * y[8])
        + 1 * (k[128] * y[20] * y[18])
        + 1 * (k[135] * y[22] * y[18])
        - 1 * (k[137] * y[21] * y[0])
        - 1 * (k[138] * y[21] * y[2])
        - 1 * (k[139] * y[21] * y[4])
        + 1 * (k[145] * y[9] * y[18])
        + 1 * (k[149] * y[10] * y[23])
        + 1 * (k[154] * y[10] * y[18])
        - 1 * (k[208] * y[21] * y[13])
        - 1 * (k[209] * y[21] * y[13])
        - 1 * (k[210] * y[21] * y[13])
        - 1 * (k[211] * y[21] * y[13])
    )
    dn[22] = (
        1 * (k[24] * y[1] * y[18])
        + 1 * (k[51] * y[3] * y[25])
        + 1 * (k[53] * y[3] * y[18])
        + 1 * (k[59] * y[12] * y[2])
        + 1 * (k[60] * y[12] * y[16])
        + 1 * (k[63] * y[12] * y[27])
        + 1 * (k[65] * y[12] * y[4])
        + 1 * (k[67] * y[12] * y[18])
        + 1 * (k[68] * y[12] * y[8])
        + 1 * (k[76] * y[17] * y[11])
        + 1 * (k[91] * y[26] * y[2])
        + 1 * (k[97] * y[28] * y[11])
        + 1 * (k[107] * y[5] * y[23])
        + 1 * (k[109] * y[5] * y[25])
        + 1 * (k[114] * y[19] * y[11])
        + 1 * (k[125] * y[20] * y[11])
        - 1 * (k[131] * y[22] * y[0])
        - 1 * (k[132] * y[22] * y[2])
        - 1 * (k[133] * y[22] * y[27])
        - 1 * (k[134] * y[22] * y[4])
        - 1 * (k[135] * y[22] * y[18])
        + 1 * (k[136] * y[7] * y[23])
        + 1 * (k[137] * y[21] * y[0])
        + 1 * (k[142] * y[9] * y[11])
        + 1 * (k[151] * y[10] * y[11])
        + 1 * (k[160] * y[23] * y[2])
        - 1 * (k[203] * y[22] * y[13])
    )
    dn[23] = (
        -1 * (k[3] * y[23])
        + 1 * (k[5] * y[11])
        + 2 * (k[10] * y[25])
        + 1 * (k[12] * y[27])
        + 1 * (k[21] * y[1] * y[25])
        - 1 * (k[26] * y[15] * y[23])
        + 1 * (k[36] * y[24] * y[14])
        + 1 * (k[37] * y[24] * y[2])
        + 1 * (k[40] * y[24] * y[25])
        + 1 * (k[42] * y[24] * y[27])
        + 1 * (k[43] * y[24] * y[4])
        + 1 * (k[44] * y[24] * y[18])
        + 1 * (k[46] * y[24] * y[8])
        - 1 * (k[48] * y[3] * y[23])
        + 1 * (k[51] * y[3] * y[25])
        - 1 * (k[57] * y[12] * y[23])
        + 1 * (k[63] * y[12] * y[27])
        - 1 * (k[72] * y[17] * y[23])
        + 1 * (k[89] * y[26] * y[0])
        + 1 * (k[91] * y[26] * y[2])
        + 1 * (k[93] * y[28] * y[0])
        - 1 * (k[94] * y[28] * y[23])
        + 1 * (k[96] * y[28] * y[2])
        + 1 * (k[97] * y[28] * y[11])
        + 1 * (k[100] * y[28] * y[27])
        + 1 * (k[102] * y[28] * y[4])
        + 1 * (k[104] * y[28] * y[18])
        + 1 * (k[106] * y[28] * y[8])
        - 1 * (k[107] * y[5] * y[23])
        - 1 * (k[111] * y[19] * y[23])
        + 1 * (k[117] * y[19] * y[27])
        - 1 * (k[123] * y[20] * y[23])
        - 1 * (k[136] * y[7] * y[23])
        - 1 * (k[141] * y[9] * y[23])
        - 1 * (k[149] * y[10] * y[23])
        - 1 * (k[156] * y[1] * y[23])
        - 1 * (k[160] * y[23] * y[2])
        + 1 * (k[161] * y[0] * y[25])
        + 1 * (k[168] * y[14] * y[27])
        + 1 * (k[170] * y[14] * y[25])
        - 1 * (k[175] * y[16] * y[23])
        - 1 * (k[177] * y[23] * y[2])
        - 1 * (k[178] * y[23] * y[27])
        - 1 * (k[179] * y[23] * y[4])
        - 1 * (k[180] * y[23] * y[4])
        + 1 * (k[182] * y[27] * y[27])
        - 1 * (k[184] * y[0] * y[23])
        - 1 * (k[186] * y[14] * y[23])
        - 2 * (k[187] * y[23] * y[23])
        + 1 * (k[191] * y[12] * y[13])
        + 2 * (k[193] * y[26] * y[13])
        + 1 * (k[194] * y[28] * y[13])
        + 1 * (k[198] * y[19] * y[13])
        + 1 * (k[200] * y[19] * y[13])
        + 1 * (k[211] * y[21] * y[13])
        + 1 * (k[221] * y[24] * y[13])
    )
    dn[24] = (
        1 * (k[3] * y[23])
        + 1 * (k[20] * y[1] * y[25])
        + 1 * (k[26] * y[15] * y[23])
        - 1 * (k[36] * y[24] * y[14])
        - 1 * (k[37] * y[24] * y[2])
        - 1 * (k[38] * y[24] * y[2])
        - 1 * (k[39] * y[24] * y[16])
        - 1 * (k[40] * y[24] * y[25])
        - 1 * (k[41] * y[24] * y[27])
        - 1 * (k[42] * y[24] * y[27])
        - 1 * (k[43] * y[24] * y[4])
        - 1 * (k[44] * y[24] * y[18])
        - 1 * (k[45] * y[24] * y[8])
        - 1 * (k[46] * y[24] * y[8])
        + 1 * (k[57] * y[12] * y[23])
        - 1 * (k[221] * y[24] * y[13])
    )
    dn[25] = (
        -1 * (k[10] * y[25])
        - 1 * (k[11] * y[25])
        - 1 * (k[20] * y[1] * y[25])
        - 1 * (k[21] * y[1] * y[25])
        - 1 * (k[28] * y[15] * y[25])
        - 1 * (k[40] * y[24] * y[25])
        - 1 * (k[50] * y[3] * y[25])
        - 1 * (k[51] * y[3] * y[25])
        - 1 * (k[61] * y[12] * y[25])
        - 1 * (k[78] * y[17] * y[25])
        + 1 * (k[88] * y[26] * y[0])
        + 1 * (k[90] * y[26] * y[2])
        + 1 * (k[92] * y[26] * y[4])
        - 1 * (k[99] * y[28] * y[25])
        - 1 * (k[109] * y[5] * y[25])
        - 1 * (k[116] * y[19] * y[25])
        - 1 * (k[144] * y[9] * y[25])
        - 1 * (k[161] * y[0] * y[25])
        - 1 * (k[170] * y[14] * y[25])
        + 1 * (k[178] * y[23] * y[27])
        - 1 * (k[181] * y[2] * y[25])
        + 1 * (k[187] * y[23] * y[23])
    )
    dn[26] = (
        1 * (k[11] * y[25])
        + 1 * (k[28] * y[15] * y[25])
        + 1 * (k[40] * y[24] * y[25])
        + 1 * (k[41] * y[24] * y[27])
        + 1 * (k[61] * y[12] * y[25])
        + 1 * (k[78] * y[17] * y[25])
        - 1 * (k[88] * y[26] * y[0])
        - 1 * (k[89] * y[26] * y[0])
        - 1 * (k[90] * y[26] * y[2])
        - 1 * (k[91] * y[26] * y[2])
        - 1 * (k[92] * y[26] * y[4])
        + 1 * (k[94] * y[28] * y[23])
        + 1 * (k[99] * y[28] * y[25])
        + 1 * (k[111] * y[19] * y[23])
        + 1 * (k[116] * y[19] * y[25])
        + 1 * (k[144] * y[9] * y[25])
        - 1 * (k[193] * y[26] * y[13])
    )
    dn[27] = (
        -1 * (k[12] * y[27])
        + 1 * (k[14] * y[18])
        - 1 * (k[22] * y[1] * y[27])
        - 1 * (k[29] * y[15] * y[27])
        - 1 * (k[41] * y[24] * y[27])
        - 1 * (k[42] * y[24] * y[27])
        + 1 * (k[45] * y[24] * y[8])
        + 1 * (k[50] * y[3] * y[25])
        - 1 * (k[52] * y[3] * y[27])
        - 1 * (k[62] * y[12] * y[27])
        - 1 * (k[63] * y[12] * y[27])
        + 1 * (k[67] * y[12] * y[18])
        - 1 * (k[79] * y[17] * y[27])
        - 1 * (k[80] * y[17] * y[27])
        + 1 * (k[95] * y[28] * y[2])
        + 1 * (k[99] * y[28] * y[25])
        - 1 * (k[100] * y[28] * y[27])
        + 1 * (k[101] * y[28] * y[4])
        + 1 * (k[103] * y[28] * y[18])
        + 1 * (k[109] * y[5] * y[25])
        + 1 * (k[110] * y[19] * y[0])
        + 1 * (k[113] * y[19] * y[2])
        + 1 * (k[114] * y[19] * y[11])
        - 1 * (k[117] * y[19] * y[27])
        + 1 * (k[119] * y[19] * y[4])
        + 1 * (k[120] * y[19] * y[18])
        - 1 * (k[126] * y[20] * y[27])
        - 1 * (k[133] * y[22] * y[27])
        + 1 * (k[141] * y[9] * y[23])
        - 1 * (k[152] * y[10] * y[27])
        - 1 * (k[162] * y[0] * y[27])
        - 1 * (k[168] * y[14] * y[27])
        + 1 * (k[169] * y[14] * y[18])
        + 1 * (k[170] * y[14] * y[25])
        + 1 * (k[175] * y[16] * y[23])
        - 1 * (k[176] * y[16] * y[27])
        - 1 * (k[178] * y[23] * y[27])
        + 1 * (k[181] * y[2] * y[25])
        - 2 * (k[182] * y[27] * y[27])
        + 1 * (k[186] * y[14] * y[23])
        - 1 * (k[189] * y[14] * y[27])
        + 1 * (k[199] * y[19] * y[13])
        + 1 * (k[208] * y[21] * y[13])
        + 1 * (k[210] * y[21] * y[13])
    )
    dn[28] = (
        1 * (k[29] * y[15] * y[27])
        + 1 * (k[39] * y[24] * y[16])
        + 1 * (k[42] * y[24] * y[27])
        + 1 * (k[62] * y[12] * y[27])
        + 1 * (k[72] * y[17] * y[23])
        + 1 * (k[79] * y[17] * y[27])
        - 1 * (k[93] * y[28] * y[0])
        - 1 * (k[94] * y[28] * y[23])
        - 1 * (k[95] * y[28] * y[2])
        - 1 * (k[96] * y[28] * y[2])
        - 1 * (k[97] * y[28] * y[11])
        - 1 * (k[98] * y[28] * y[16])
        - 1 * (k[99] * y[28] * y[25])
        - 1 * (k[100] * y[28] * y[27])
        - 1 * (k[101] * y[28] * y[4])
        - 1 * (k[102] * y[28] * y[4])
        - 1 * (k[103] * y[28] * y[18])
        - 1 * (k[104] * y[28] * y[18])
        - 1 * (k[105] * y[28] * y[8])
        - 1 * (k[106] * y[28] * y[8])
        + 1 * (k[123] * y[20] * y[23])
        - 1 * (k[194] * y[28] * y[13])
    )

    return dn / y * 1e1**t


def osu_initial_conditions(num: int) -> np.ndarray:
    """
    Generates initial conditions for a reduced osu2008 reduced network consisting of 29 species.

    The species (in order) are:
       ["C", "C+", "CH", "CH+", "CH2", "CH2+", "CH3", "CH3+",
        "CH4", "CH4+", "CH5+", "CO", "CO+", "E", "H", "H+",
        "H2", "H2+", "H2O", "H2O+", "H3+", "H3O+", "HCO+",
        "O", "O+", "O2", "O2+", "OH", "OH+"]

    For each trajectory:
      - All species are initialized to a floor of 1e-20 * ngas (with ngas = 1e4),
      - "H2" is fixed to ngas,
      - "C" and "C+" are sampled uniformly in log–space between ngas * 10^(rmin) and ngas * 10^(rmax),
      - "O" is computed as 4×(C + C+),
      - "E" is computed as the sum of abundances for species whose names contain a "+".
    Finally, all values are converted to log10.
    """
    ngas = 1e4
    rmin = -6.0
    rmax = -4.0
    species = [
        "C",
        "C+",
        "CH",
        "CH+",
        "CH2",
        "CH2+",
        "CH3",
        "CH3+",
        "CH4",
        "CH4+",
        "CH5+",
        "CO",
        "CO+",
        "E",
        "H",
        "H+",
        "H2",
        "H2+",
        "H2O",
        "H2O+",
        "H3+",
        "H3O+",
        "HCO+",
        "O",
        "O+",
        "O2",
        "O2+",
        "OH",
        "OH+",
    ]
    ndim = len(species)
    ic = np.empty((num, ndim))
    for i in range(num):
        # Initialize all species to the floor.
        n = {sp: 1e-20 * ngas for sp in species}
        n["H2"] = ngas
        n["C"] = ngas * 10 ** (np.random.random() * (rmax - rmin) + rmin)
        n["C+"] = ngas * 10 ** (np.random.random() * (rmax - rmin) + rmin)
        n["O"] = (n["C"] + n["C+"]) * 4
        n["E"] = sum(n[sp] for sp in species if "+" in sp)
        # Convert to log10
        for j, sp in enumerate(species):
            ic[i, j] = np.log10(n[sp])
    return ic


FUNCS: Dict[str, Dict[str, Any]] = {
    "lotka_volterra": {
        "func": lotka_volterra,
        "tsteps": np.linspace(0, 100, 101),
        "ndim": 6,
        "labels": ["Predator1", "Predator2", "Predator3", "Prey1", "Prey2", "Prey3"],
        "sampling": {
            "space": "log",  # Options: 'linear', 'log'
            "bounds": [
                (1, 10.0),  # Predator1
                (1, 10.0),  # Predator2
                (1, 10.0),  # Predator3
                (1, 10.0),  # Prey1
                (1, 10.0),  # Prey2
                (1, 10.0),  # Prey3
            ],
        },
    },
    "reaction": {
        "func": reaction,
        "tsteps": np.linspace(0, 3, 101),
        "ndim": 5,
        "labels": ["S1", "S2", "S3", "S4", "S5"],
        "sampling": {
            "space": "log",  # Options: 'linear', 'log'
            "bounds": [
                (0.1, 20.0),  # S1
                (0.1, 20.0),  # S2
                (0.1, 20.0),  # S3
                (1, 30.0),  # S4
                (1, 30.0),  # S5
            ],
        },
    },
    "nonlinear_oscillators": {
        "func": coupled_nonlinear_oscillators,
        "tsteps": np.linspace(0, 3, 101),
        "ndim": 10,
        "labels": ["x1", "x2", "x3", "x4", "x5", "v1", "v2", "v3", "v4", "v5"],
        "sampling": {
            "space": "linear",  # Options: 'linear', 'log'
            "bounds": [
                (-1, 1),  # x1
                (-1, 1),  # x2
                (-1, 1),  # x3
                (-1, 1),  # x4
                (-1, 1),  # x5
                (-1, 1),  # v1
                (-1, 1),  # v2
                (-1, 1),  # v3
                (-1, 1),  # v4
                (-1, 1),  # v5
            ],
        },
    },
    "simple_ode": {
        "func": simple_ode,
        "tsteps": np.linspace(0, 10, 101),
        "ndim": 5,
        "labels": ["S1", "S2", "S3", "S4", "S5"],
        "sampling": {
            "space": "log",  # Options: 'linear', 'log'
            "bounds": [
                (0.1, 10.0),  # S1
                (0.1, 10.0),  # S2
                (0.1, 10.0),  # S3
                (0.1, 10.0),  # S4
                (0.1, 10.0),  # S5
            ],
        },
    },
    "osu": {
        "func": osu_ode,
        "init_func": osu_initial_conditions,
        "tsteps": np.power(np.linspace(np.log10(1e-6 * spy), 8, 101), 10),
        "ndim": 29,  # (Make sure this matches the number of species in your reduced network.)
        "labels": [
            "C",
            "C+",
            "CH",
            "CH+",
            "CH2",
            "CH2+",
            "CH3",
            "CH3+",
            "CH4",
            "CH4+",
            "CH5+",
            "CO",
            "CO+",
            "E",
            "H",
            "H+",
            "H2",
            "H2+",
            "H2O",
            "H2O+",
            "H3+",
            "H3O+",
            "HCO+",
            "O",
            "O+",
            "O2",
            "O2+",
            "OH",
            "OH+",
        ],
        "sampling": None,  # Not used since ICs come from init_func.
        "solver_options": {"method": "BDF", "atol": 1e-6, "rtol": 1e-6},
        "log_time": True,
        "final_transform": True,
    },
}
